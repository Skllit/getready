package com.tasks.problem;

import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.concurrent.locks.ReadWriteLock;
import java.util.concurrent.locks.ReentrantReadWriteLock;
import java.util.NoSuchElementException;

public class LRUCache<K, V> {

    private ConcurrentLinkedQueue<K> concurrentLinkedQueue = new ConcurrentLinkedQueue<K>();
    private ConcurrentHashMap<K, V> concurrentHashMap = new ConcurrentHashMap<K, V>();
    private ReadWriteLock readWriteLock = new ReentrantReadWriteLock();
    private int maxSize = 0;

    public LRUCache(final int MAX_SIZE) {
        this.maxSize = MAX_SIZE;
    }

    public V get(K key) {
        readWriteLock.readLock().lock();
        try {
            V v = null;
            if (concurrentHashMap.containsKey(key)) {
                concurrentLinkedQueue.remove(key);
                v = concurrentHashMap.get(key);
                concurrentLinkedQueue.add(key);
            }
            return v;
        } finally {
            readWriteLock.readLock().unlock();
        }
    }

    public int size() {
        readWriteLock.readLock().lock();
        try {
            return concurrentHashMap.size();
        } finally {
            readWriteLock.readLock().unlock();
        }
    }

    public void put(K key, V value) {
        readWriteLock.writeLock().lock();
        try {
            if (concurrentHashMap.containsKey(key)) {
                concurrentLinkedQueue.remove(key);
            }
            while (concurrentLinkedQueue.size() >= maxSize) {
                K lruKey = concurrentLinkedQueue.poll(); // Get and remove the least recently used key.
                if (lruKey != null) { // Check if poll returned null (empty queue)
                    concurrentHashMap.remove(lruKey); // Remove the key from the map.
                }
            }
            concurrentLinkedQueue.add(key);
            concurrentHashMap.put(key, value);
        } finally {
            readWriteLock.writeLock().unlock();
        }
    }
}
